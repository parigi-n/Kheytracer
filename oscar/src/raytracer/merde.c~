/*
** find_baricenter.c for find in /home/noswor_o/MUL_2014_rtracer/oscar
** 
** Made by Oscar Nosworthy
** Login   <noswor_o@epitech.net>
** 
** Started on  Thu Jun  4 17:46:34 2015 Oscar Nosworthy
** Last update Sat Jun  6 10:37:30 2015 Oscar Nosworthy
*/

#include "struct.h"
#include "rt.h"

t_coor	crossProduct(t_coor point1, t_coor point2)
{
  t_coor	product;
  product.x = (point1.y * point2.z) - (point1.z * point2.y);
  product.y = (point1.x * point2.z) - (point1.z * point2.x);
  product.z = (point1.y * point2.x) - (point1.x * point2.y);
  return (product);
}

double	dotProduct(t_coor point1, t_coor point2)
{
  double	dot;

  dot = point1.x * point2.x + point1.y * point2.y + point1.z * point2.z;
  return (dot);
}

t_coor		minus(t_coor point1, t_coor point2)
{
  t_coor	vector;

  vector.x = point1.x - point2.x;
  vector.y = point1.y - point2.y;
  vector.z = point1.z - point2.z;
  return (vector);
}

t_coor	create_tr1(t_coor tr1)
{
  tr1.x = -300;
  tr1.y = 0;
  tr1.z = -100;
  return (tr1);
}

t_coor	create_tr2(t_coor tr2)
{
  tr2.x = -300;
  tr2.y = -200;
  tr2.z = 0;
  return (tr2);
}

t_coor	create_tr3(t_coor tr3)
{
  tr3.x = -300;
  tr3.y = -200;
  tr3.z = -100;
  return (tr3);
}

t_tricor	create_triangle(t_tricor triangle)
{
  triangle.tr1 = create_tr1(triangle.tr1);
  triangle.tr2 = create_tr2(triangle.tr2);
  triangle.tr3 = create_tr3(triangle.tr3);
}

t_tricor	find_edges(t_tricor edges, t_tricor triangle)
{
  edges.tr1 = minus(tri.tr1, tri.tr2);
  edges.tr2 = minus(tri.tr3, tri.tr1);
  edges.tr3 = minus(tri.tr2, tri.tr3);
  return (edges);
}

int	inter_triangle(t_all *all, t_vec *vec, t_object *obj)
{
  t_tricor	tri;
  t_tricor	edges;
  t_coor	inter;
  t_coor	normal;
  t_coor	C0;
  t_coor	C1;
  t_coor	C2;
  t_coor	coor;

  tri = create_triangle(tri);
  edges = find_edges(edges, tri);

  normal = crossProduct(edges.tr1edge1, edge2);
  coor.x = (vec->pos.x - obj->pos.x);
  coor.y = (vec->pos.y - obj->pos.y);
  coor.z = (vec->pos.z - obj->pos.z);

  obj->k = - dotProduct(coor, normal) / dotProduct((vec->v), normal);
  inter.x = vec->pos.x + obj->k * vec->v.x;
  inter.y = vec->pos.y + obj->k * vec->v.y;
  inter.z = vec->pos.z + obj->k * vec->v.z;
  
  C0 = minus(inter, tr2);
  C1 = minus(inter, tr1);
  C2 = minus(inter, tr3);

  if (obj->k > 0.0000001)
    {
      if (dotProduct(normal, crossProduct(edge1, C0)) > 0 &&
	  dotProduct(normal, crossProduct(edge2, C1)) > 0 &&
	  dotProduct(normal, crossProduct(edge3, C2)) > 0)
	return (obj->is_true = 1);
    }
  return (obj->is_true = 0);
}
